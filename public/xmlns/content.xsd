<?xml version="1.0" encoding="UTF-8" ?>
<xs:schema xmlns:content="https://mobile-content-api.cru.org/xmlns/content" xmlns:xs="http://www.w3.org/2001/XMLSchema"
    attributeFormDefault="unqualified" elementFormDefault="qualified"
    targetNamespace="https://mobile-content-api.cru.org/xmlns/content">

    <!-- Value definitions -->
    <xs:simpleType name="colorValue">
        <xs:restriction base="xs:string">
            <xs:pattern value="rgba\([0-9]{1,3},\s*[0-9]{1,3},\s*[0-9]{1,3},\s*([01]|0?\.[0-9]*)\)" />
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="imageScaleType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="fit">
                <xs:annotation>
                    <xs:documentation>Scale image to fit the UI size without cropping any of the image
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="fill">
                <xs:annotation>
                    <xs:documentation>Scale image to completely fill the UI, cropping if necessary</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="fill-x">
                <xs:annotation>
                    <xs:documentation>Scale image to match the width of the UI, cropping if necessary</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="fill-y">
                <xs:annotation>
                    <xs:documentation>Scale image to match the height of the UI, cropping if necessary
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="imageGravity">
        <xs:annotation>
            <xs:documentation>This type defines align attributes for how an image should be aligned before applying the
                scale type. It is possible to have 1 align type specified for each axis (e.g. "start top").
            </xs:documentation>
        </xs:annotation>
        <xs:list>
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="center">
                        <xs:annotation>
                            <xs:documentation>The image should be centered in it's container.</xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="start">
                        <xs:annotation>
                            <xs:documentation>The start edge of the image should be aligned to the start edge of the
                                container. The start edge is the left edge if left to right languages, and right edge in
                                right to left languages.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="end">
                        <xs:annotation>
                            <xs:documentation>The end edge of the image should be aligned to the end edge of the
                                container. The end edge is the right edge if left to right languages, and left edge in
                                right to left languages.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="top">
                        <xs:annotation>
                            <xs:documentation>The top edge of the image should be aligned to the top edge of the
                                container.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="bottom">
                        <xs:annotation>
                            <xs:documentation>The bottom edge of the image should be aligned to the bottom edge of the
                                container.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                </xs:restriction>
            </xs:simpleType>
        </xs:list>
    </xs:simpleType>

    <xs:simpleType name="textAlign">
        <xs:restriction base="xs:token">
            <xs:enumeration value="start" />
            <xs:enumeration value="end" />
            <xs:enumeration value="center" />
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="uri">
        <xs:restriction base="xs:anyURI">
            <xs:pattern value="https?://.*" />
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="eventIdsType">
        <xs:list>
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:pattern value="([a-zA-Z0-9]+:)?[a-zA-Z0-9_\-]+" />
                </xs:restriction>
            </xs:simpleType>
        </xs:list>
    </xs:simpleType>
    <xs:simpleType name="listener">
        <xs:restriction base="xs:token">
            <xs:pattern value="[a-zA-Z0-9_\-]+" />
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="listenersType">
        <xs:list itemType="content:listener" />
    </xs:simpleType>

    <!-- element nodes -->
    <!--
        Text Content
            i18n-id:    OPTIONAL - OneSky translation id
            text-color: DEFAULT( inherit text-color )
            text-scale: DEFAULT( inherit text-scale )
    -->
    <xs:complexType name="text">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute name="i18n-id" type="xs:string" use="optional" />
                <xs:attribute name="text-align" type="content:textAlign" use="optional">
                    <xs:annotation>
                        <xs:documentation>Defines the alignment of the text. This defaults to start.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="text-color" type="content:colorValue" use="optional" />
                <xs:attribute name="text-scale" type="xs:float" use="optional" />
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <!--
        Image
            resource:  REQUIRED - the resource id listed in the manifest
    -->
    <xs:complexType name="image">
        <xs:annotation>
            <xs:documentation>This is an image content type. The image is rendered with a width matching the width of
                whatever container it is contained in. This is done to provide the most consistent image size experience
                across devices of varying screen sizes and densities.
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="resource" type="xs:string" use="required" />
    </xs:complexType>

    <!-- Button -->
    <!--
        Samples:
        <content:button
            color="rgba(255,0,0,1)"
            type="url"
            url="https://www.google.com/">
            <content:text
                text-align="center"
                text-color="rgba(255,255,255,1)">
                Google
            </content:text>
        </content:button>

        <content:button
            type="event"
            events="trigger-modal">
            <content:text>Do something!</content:text>
        </content:button>
    -->
    <xs:complexType name="button">
        <xs:all>
            <xs:element ref="content:text">
                <xs:annotation>
                    <xs:documentation>This element is the text content of this button. The text-color attribute defaults
                        to the primary-text-color of the closest ancestor container. The text-align attribute for
                        buttons defaults to center.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:all>
        <xs:attribute name="type" use="required">
            <xs:annotation>
                <xs:documentation>This attribute determines what type of button this is.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="event">
                        <xs:annotation>
                            <xs:documentation>"event" type buttons will trigger the events specified.</xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="url">
                        <xs:annotation>
                            <xs:documentation>"url" type buttons will launch the url specified.</xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="events" type="content:eventIdsType" use="optional">
            <xs:annotation>
                <xs:documentation>This attribute defines the events to trigger for "event" buttons.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="url" type="content:uri" use="optional">
            <xs:annotation>
                <xs:documentation>This attribute defines the url to open for "url" buttons.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="color" type="content:colorValue" use="optional">
            <xs:annotation>
                <xs:documentation>This attribute determines the color of the button. This defaults to the primary-color
                    of the closest ancestor container.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <!--
        Link
            text-color: DEFAULT( inherit primary-color )
    -->
    <xs:complexType name="link">
        <xs:complexContent>
            <xs:extension base="content:textChild">
                <!-- events: events to fire when link is pressed. -->
                <xs:attribute name="events" type="content:eventIdsType" use="required" />
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <!--
        Input
            name:  REQUIRED - input key name
            type:  (text|email|phone|hidden) DEFAULT( text )
            value: OPTIONAL DEFAULT( empty_string )
    -->
    <xs:complexType name="input">
        <xs:all>
            <xs:element name="label" maxOccurs="1" minOccurs="0" type="content:textChild" />
            <xs:element name="placeholder" maxOccurs="1" minOccurs="0" type="content:textChild" />
        </xs:all>
        <xs:attribute name="name" type="xs:string" use="required" />
        <xs:attribute name="type" use="optional">
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="text" />
                    <xs:enumeration value="email" />
                    <xs:enumeration value="phone" />
                    <xs:enumeration value="hidden" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="value" type="xs:string" use="optional" />
    </xs:complexType>

    <!-- Tabbed content -->
    <xs:complexType name="tabs">
        <xs:sequence>
            <xs:element name="tab" minOccurs="1" maxOccurs="unbounded">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="label" type="content:textChild" />
                        <xs:choice minOccurs="0" maxOccurs="unbounded">
                            <xs:group ref="content:elements" />
                        </xs:choice>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <!-- Content Elements -->
    <xs:element name="text" type="content:text" />
    <xs:element name="image" type="content:image" />
    <xs:element name="button" type="content:button" />
    <xs:element name="link" type="content:link" />
    <xs:element name="input" type="content:input" />
    <xs:element name="tabs" type="content:tabs" />
    <xs:group name="elements">
        <xs:choice>
            <xs:element ref="content:text" />
            <xs:element ref="content:image" />
            <xs:element ref="content:button" />
            <xs:element ref="content:link" />
            <xs:element ref="content:input" />
            <xs:element ref="content:tabs" />
        </xs:choice>
    </xs:group>
    <xs:complexType name="textChild">
        <xs:all>
            <xs:element ref="content:text" />
        </xs:all>
    </xs:complexType>
</xs:schema>
